selector_to_html = {"a[href=\"#what-is-myst\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">What is MyST?<a class=\"headerlink\" href=\"#what-is-myst\" title=\"Link to this heading\">#</a></h2><p>MyST stands for \u201cMarkedly Structured Text\u201d. It\nis a slight variation on a flavor of markdown called \u201cCommonMark\u201d markdown,\nwith small syntax extensions to allow you to write <strong>roles</strong> and <strong>directives</strong>\nin the Sphinx ecosystem.</p><p>For more about MyST, see <a class=\"reference external\" href=\"https://jupyterbook.org/content/myst.html\">the MyST Markdown Overview</a>.</p>", "a[href=\"#sample-roles-and-directives\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Sample Roles and Directives<a class=\"headerlink\" href=\"#sample-roles-and-directives\" title=\"Link to this heading\">#</a></h2><p>Roles and directives are two of the most powerful tools in Jupyter Book. They\nare kind of like functions, but written in a markup language. They both\nserve a similar purpose, but <strong>roles are written in one line</strong>, whereas\n<strong>directives span many lines</strong>. They both accept different kinds of inputs,\nand what they do with those inputs depends on the specific role or directive\nthat is being called.</p><p>Here is a \u201cnote\u201d directive:</p>", "a[href=\"markdown-notebooks.html\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Notebooks with MyST Markdown<a class=\"headerlink\" href=\"#notebooks-with-myst-markdown\" title=\"Link to this heading\">#</a></h1><p>Jupyter Book also lets you write text-based notebooks using MyST Markdown.\nSee <a class=\"reference external\" href=\"https://jupyterbook.org/file-types/myst-notebooks.html\">the Notebooks with MyST Markdown documentation</a> for more detailed instructions.\nThis page shows off a notebook written in MyST Markdown.</p>", "a[href=\"#citations\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Citations<a class=\"headerlink\" href=\"#citations\" title=\"Link to this heading\">#</a></h2><p>You can also cite references that are stored in a <code class=\"docutils literal notranslate\"><span class=\"pre\">bibtex</span></code> file. For example,\nthe following syntax: <code class=\"docutils literal notranslate\"><span class=\"pre\">{cite}`holdgraf_evidence_2014`</span></code> will render like\nthis: <span id=\"id1\">[]</span>.</p><p>Moreover, you can insert a bibliography into your page with this syntax:\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">{bibliography}</span></code> directive must be used for all the <code class=\"docutils literal notranslate\"><span class=\"pre\">{cite}</span></code> roles to\nrender properly.\nFor example, if the references for your book are stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">references.bib</span></code>,\nthen the bibliography is inserted with:</p>", "a[href=\"#markdown-files\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Markdown Files<a class=\"headerlink\" href=\"#markdown-files\" title=\"Link to this heading\">#</a></h1><p>Whether you write your book\u2019s content in Jupyter Notebooks (<code class=\"docutils literal notranslate\"><span class=\"pre\">.ipynb</span></code>) or\nin regular markdown files (<code class=\"docutils literal notranslate\"><span class=\"pre\">.md</span></code>), you\u2019ll write in the same flavor of markdown\ncalled <strong>MyST Markdown</strong>.\nThis is a simple file to help you get started and show off some syntax.</p>", "a[href=\"#learn-more\"]": "<h2 class=\"tippy-header\" style=\"margin-top: 0;\">Learn more<a class=\"headerlink\" href=\"#learn-more\" title=\"Link to this heading\">#</a></h2><p>This is just a simple starter to get you started.\nYou can learn a lot more at <a class=\"reference external\" href=\"https://jupyterbook.org\">jupyterbook.org</a>.</p>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
